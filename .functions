REMOTES_ORIGIN_PREFIX="remotes/origin/"

function mkd() {
    mkdir -p "$@" && cd "$_"
}

function gcof() {
    local BRANCH=$(git branch -a | fzf | awk '{$1=$1};1')

    git checkout $(getBranchName $BRANCH)
}

function gcotf() {
    local TAG=$(git tag -l --sort=-v:refname | fzf | awk '{$1=$1};1')

    git checkout $TAG
}

function glf() {
    local BRANCH=$(git branch -a | fzf | awk '{$1=$1};1')

    if [[ $(isOrigin $BRANCH) == true ]]; then
        git pull origin $(getBranchName $BRANCH)
    else
        git merge $(getBranchName $BRANCH)
    fi
}

function gbdf {
    local BRANCH=$(git branch -a | fzf | awk '{$1=$1};1')

    git branch -D $(getBranchName $BRANCH)
}

function gitcm() {
    local CURRENT_PATH=$(pwd)

    cd $CURRENT_PATH

    if [ -z "$@" ]; then
        echo ERROR: PROVIDE MESSAGE
        exit 0
    fi

    local PROJECT_TASK_PREFIX=$(git branch --show-current | grep -oP '(?<=\/)\w+-\d+')

    if [[ ! $PROJECT_TASK_PREFIX ]]; then
        git commit -m "$@"
    else
        git commit -m "[$PROJECT_TASK_PREFIX] - $@"
    fi
}

function gstaaf() {
    local STASH_INDEX=$(getStashIndex)

    if [ -z "$STASH_INDEX" ]; then
        return
    fi

    git stash apply $STASH_INDEX
}

function gstadf() {
    local STASH_INDEX=$(getStashIndex)

    if [ -z "$STASH_INDEX" ]; then
        return
    fi

    git stash drop $STASH_INDEX
}

function gstasf() {
    local STASH_INDEX=$(getStashIndex)

    if [ -z "$STASH_INDEX" ]; then
        return
    fi

    git stash show -p $STASH_INDEX
}

function getStashIndex() {
    local STASH=$(git stash list | fzf | awk '{$1=$1};1')
    echo $STASH | grep -oP '(?<=stash@{).*(?=})'
}

function isOrigin() {
    if [[ "$1" == *"$REMOTES_ORIGIN_PREFIX"* ]]; then
        echo true
    else
        echo false
    fi
}

function getBranchName() {
    local BRANCH=$1
    if [[ $(isOrigin $BRANCH) == true ]]; then
        echo ${BRANCH#"$REMOTES_ORIGIN_PREFIX"}
    else
        echo $BRANCH
    fi
}

function npmr() {
    local FILE='package.json'

    if ! test -f "$FILE"; then
        echo "File does not exist."
        return 0
    fi

    local COMMAND=$(echo $(jq .scripts package.json) | jq -r 'to_entries | sort_by(.key) | reverse | map(.key + " => " + .value) | join("\n")' | fzf | grep -Po ".+(?= =>)")

    if [ -z "${COMMAND}" ]; then
        return
    fi

    echo COMMAND: $COMMAND

    npm run $COMMAND
    echo ": $(date +"%s"):0;npm run $COMMAND" >>~/.zsh_history
    fc -R
}
