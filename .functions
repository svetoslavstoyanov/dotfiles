function mkd() {
    mkdir -p "$@" && cd "$_"
}

function gcof() {
    BRANCH=$(git branch -a | fzf | awk '{$1=$1};1')

    git checkout $(getBranchName $BRANCH)
}

function gcotf() {
    TAG=$(git tag -l --sort=-v:refname | fzf | awk '{$1=$1};1')

    git checkout $TAG
}

function glf(){
    BRANCH=$(git branch -a | fzf | awk '{$1=$1};1')

    if [[ $(isOrigin $BRANCH) == true ]]; then
        echo ORIGIN
        git pull origin $(getBranchName $BRANCH)
    else
        echo LOCAL
        git merge $(getBranchName $BRANCH)
    fi
}

function gitcm() {
    # ADD DEFAULT IF TASK IS NOT AVAILABLE
    CURRENT_PATH=$(pwd)

    cd $CURRENT_PATH

    if [ -z "$@" ]; then
        echo PROVIDE MESSAGE
        exit 0
    fi

    CURRENT_BRANCH=$(git branch --show current)

    PROJECT=$(git branch --show current | cut -d'/' -f2 | cut -d'-' -f1)
    TASK=$(git branch --show current | cut -d'/' -f2 | cut -d'-' -f2)
    MESSAGE=$1

    COMMIT_MESSAGE="[$PROJECT-$TASK] - $@"

    git commit -m "$COMMIT_MESSAGE"

}

function gstaaf(){
    STASH=$(git stash list | fzf | awk '{$1=$1};1')
    STASH_INDEX=$(echo $STASH | grep -oP '(?<=stash@{).*(?=})')
    
    echo APPLY STASH: $STASH
    
    git stash apply $STASH_INDEX
}


function isOrigin() {
    REMOTES_ORIGIN_PREFIX="remotes/origin/"

    if [[ "$1" == *"$REMOTES_ORIGIN_PREFIX"* ]]; then
        echo true
    else
        echo false
    fi
}

function getBranchName(){
    local BRANCH=$1
    if [[ $(isOrigin $BRANCH) == true ]]; then
        echo ${BRANCH#"remotes/origin/"}
    else
        echo $BRANCH
    fi
}